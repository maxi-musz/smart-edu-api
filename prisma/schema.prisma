generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum SchoolType {
  primary
  secondary
  primary_and_secondary
}

enum SchoolOwnership {
  government
  private
}

enum SchoolStatus {
  not_verified
  pending
  approved
  rejected
  failed
  suspended
  closed
  archived
}

enum PaymentType {
  full
  partial
}

enum TransactionType {
  credit
  debit
}

enum NotificationType {
  all
  teachers
  students
  school_director
  admin
}

enum Gender {
  male
  female
  other
}

enum AcademicTerm {
  first
  second
  third
}

enum Roles {
  student
  teacher
  school_director
  school_admin
  parent
  super_admin
  ict_staff
}

enum UserStatus {
  active
  suspended
  inactive
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum WalletTransactionType {
  CREDIT
  DEBIT
  TRANSFER
  WITHDRAWAL
  REFUND
  FEE_PAYMENT
  SCHOLARSHIP
  GRANT
  DONATION
}

enum WalletTransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
  REVERSED
}

enum WalletType {
  SCHOOL_WALLET
  STUDENT_WALLET
  TEACHER_WALLET
}

model School {
  id               String          @id @default(cuid())
  school_name      String
  school_email     String          @unique
  school_phone     String
  school_address   String
  school_type      SchoolType
  school_ownership SchoolOwnership
  status           SchoolStatus    @default(pending)
  current_term     AcademicTerm    @default(first)
  current_year     Int             @default(2024)
  term_start_date  DateTime?
  term_end_date    DateTime?

  cacId          String? @unique
  utilityBillId  String? @unique
  taxClearanceId String? @unique

  cac           Document? @relation("CACDoc", fields: [cacId], references: [id])
  utility_bill  Document? @relation("UtilityBillDoc", fields: [utilityBillId], references: [id])
  tax_clearance Document? @relation("TaxClearanceDoc", fields: [taxClearanceId], references: [id])

  platformId String?
  platform   Organisation? @relation(fields: [platformId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users           User[]
  students        Student[]
  teachers        Teacher[]
  parents         Parent[]
  classes         Class[]
  subjects        Subject[]
  finance         Finance?
  schedules       TimetableEntry[]
  timeSlots       TimeSlot[]
  notifications   Notification[]
  wallet          Wallet?
  videoContent    VideoContent[]
  pdfMaterial     PDFMaterial[]
  assignment      Assignment[]
  cbtQuiz         CBTQuiz[]
  liveClass       LiveClass[]
  libraryResource LibraryResource[]
}

model Document {
  id         String @id @default(cuid())
  secure_url String
  public_id  String

  schoolCac          School? @relation("CACDoc")
  schoolUtilityBill  School? @relation("UtilityBillDoc")
  schoolTaxClearance School? @relation("TaxClearanceDoc")
}

// Enhanced Teacher, Student, and Parent models with proper school references

model User {
  id                String     @id @default(cuid())
  school_id         String
  email             String     @unique
  password          String
  first_name        String
  last_name         String
  phone_number      String
  display_picture   Json? // { secure_url: string, public_id: string }
  gender            Gender     @default(other)
  otp               String?    @default("")
  otp_expires_at    DateTime?
  is_email_verified Boolean?   @default(false)
  is_otp_verified   Boolean?   @default(false)
  role              Roles      @default(student)
  status            UserStatus @default(active)
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt

  // relations
  school          School               @relation(fields: [school_id], references: [id])
  classesEnrolled Class[]              @relation("StudentClass")
  payments        Payment[]            @relation("StudentPayment")
  performances    StudentPerformance[] @relation("StudentPerformance")
  videoContent    VideoContent[]
  pdfMaterial     PDFMaterial[]
  assignment      Assignment[]
  cbtQuiz         CBTQuiz[]
  liveClass       LiveClass[]
  libraryResource LibraryResource[]

  // New relationships with specific models
  teacher Teacher?
  student Student?
  parent  Parent?
}

model Teacher {
  id                  String     @id @default(cuid())
  email               String     @unique
  first_name          String
  last_name           String
  phone_number        String
  display_picture     Json? // { secure_url: string, public_id: string }
  school_id           String
  user_id             String     @unique
  gender              Gender     @default(other)
  role                Roles      @default(teacher)
  password            String     @default("")
  teacher_id          String     @unique // Custom teacher ID like "SMHT-25-001"
  employee_number     String?    @unique // School employee number
  qualification       String? // e.g., "B.Sc Education", "M.Ed", "Ph.D"
  specialization      String? // e.g., "Mathematics", "English Literature"
  years_of_experience Int? // Number of years teaching
  hire_date           DateTime   @default(now())
  salary              Float? // Monthly salary
  department          String?
  is_class_teacher    Boolean    @default(false)
  status              UserStatus @default(active)
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt

  // relations
  user              User             @relation(fields: [user_id], references: [id], onDelete: Cascade)
  school            School           @relation(fields: [school_id], references: [id])
  classesManaging   Class[]          @relation("ClassTeacher")
  subjectsTeaching  TeacherSubject[]
  schedulesTeaching TimetableEntry[] @relation("TeacherSchedule")

  @@index([school_id])
  @@index([teacher_id])
  @@index([employee_number])
  @@index([department])
  @@index([is_class_teacher])
}

model Student {
  id                 String     @id @default(cuid())
  school_id          String
  user_id            String     @unique // Reference to User for authentication
  student_id         String     @unique // Custom student ID like "STD/2024/001"
  admission_number   String?    @unique // School admission number
  date_of_birth      DateTime?
  admission_date     DateTime   @default(now())
  current_class_id   String?
  guardian_name      String?
  guardian_phone     String?
  guardian_email     String?
  address            String?
  emergency_contact  String?
  blood_group        String?
  medical_conditions String?
  allergies          String?
  previous_school    String? // Previous school attended
  academic_level     String? // e.g., "Primary 5", "JSS 2", "SSS 1"
  parent_id          String? // Reference to parent
  status             UserStatus @default(active)
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt

  // relations
  user   User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  school School  @relation(fields: [school_id], references: [id])
  parent Parent? @relation("ParentChildren", fields: [parent_id], references: [id])

  @@index([school_id])
  @@index([current_class_id])
  @@index([student_id])
  @@index([admission_number])
  @@index([parent_id])
  @@index([academic_level])
}

model Parent {
  id                 String     @id @default(cuid())
  school_id          String
  user_id            String     @unique // Reference to User for authentication
  parent_id          String     @unique // Custom parent ID like "PAR/2024/001"
  occupation         String? // e.g., "Engineer", "Teacher", "Business Owner"
  employer           String? // Company or organization
  address            String?
  emergency_contact  String?
  relationship       String? // e.g., "Father", "Mother", "Guardian"
  is_primary_contact Boolean    @default(true)
  status             UserStatus @default(active)
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt

  // relations
  user     User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  school   School    @relation(fields: [school_id], references: [id])
  children Student[] @relation("ParentChildren")

  @@index([school_id])
  @@index([parent_id])
  @@index([relationship])
  @@index([is_primary_contact])
}

model Class {
  id             String  @id @default(cuid())
  name           String
  schoolId       String
  classTeacherId String?

  school       School    @relation(fields: [schoolId], references: [id])
  classTeacher Teacher?  @relation("ClassTeacher", fields: [classTeacherId], references: [id])
  students     User[]    @relation("StudentClass")
  subjects     Subject[]

  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  payments     Payment[]
  schedules    TimetableEntry[]
  performances StudentPerformance[]
}

model Subject {
  id          String  @id @default(cuid())
  name        String // e.g., "Mathematics"
  code        String? // e.g., "MATH101"
  color       String  @default("#3B82F6") // Hex color for UI
  description String?
  schoolId    String

  school           School           @relation(fields: [schoolId], references: [id])
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  timetableEntries TimetableEntry[]
  teacherSubjects  TeacherSubject[]
  Class            Class?           @relation(fields: [classId], references: [id])
  classId          String?

  @@unique([code, schoolId])
}

model Finance {
  id               String   @id @default(cuid())
  school_id        String   @unique
  total_revenue    Float    @default(0)
  outstanding_fee  Float    @default(0)
  amount_withdrawn Float    @default(0)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // relations
  school   School    @relation(fields: [school_id], references: [id])
  payments Payment[]
  Wallet   Wallet[]
}

model Payment {
  id               String          @id @default(cuid())
  finance_id       String
  student_id       String
  class_id         String
  payment_for      String // e.g., "Tuition Fee", "Exam Fee", etc.
  amount           Float
  payment_type     PaymentType
  transaction_type TransactionType
  payment_date     DateTime        @default(now())
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt

  // relations
  finance Finance @relation(fields: [finance_id], references: [id])
  student User    @relation("StudentPayment", fields: [student_id], references: [id])
  class   Class   @relation(fields: [class_id], references: [id])
}

model TimetableEntry {
  id          String    @id @default(cuid())
  class_id    String
  subject_id  String
  teacher_id  String
  school_id   String
  timeSlotId  String
  day_of_week DayOfWeek
  room        String?
  notes       String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // relations
  class    Class    @relation(fields: [class_id], references: [id])
  subject  Subject  @relation(fields: [subject_id], references: [id])
  teacher  Teacher  @relation("TeacherSchedule", fields: [teacher_id], references: [id])
  timeSlot TimeSlot @relation(fields: [timeSlotId], references: [id])
  school   School   @relation(fields: [school_id], references: [id])

  @@unique([class_id, timeSlotId, day_of_week])
  @@index([teacher_id, timeSlotId, day_of_week])
  @@index([school_id, day_of_week, timeSlotId])
}

model TimeSlot {
  id        String   @id @default(cuid())
  startTime String // Format: "HH:mm" (e.g., "08:30", "11:45")
  endTime   String // Format: "HH:mm" (e.g., "10:30", "13:45")
  label     String // e.g., "Period 1", "Morning Break", etc.
  order     Int // For sorting periods in order (school-specific)
  schoolId  String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  school           School           @relation(fields: [schoolId], references: [id])
  timetableEntries TimetableEntry[]

  @@unique([startTime, endTime, schoolId])
  @@index([order])
  @@index([schoolId, startTime, endTime])
}

model Wallet {
  id           String     @id @default(cuid())
  school_id    String     @unique
  balance      Float      @default(0)
  currency     String     @default("NGN")
  wallet_type  WalletType @default(SCHOOL_WALLET)
  is_active    Boolean    @default(true)
  last_updated DateTime   @default(now())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  // relations
  school       School              @relation(fields: [school_id], references: [id])
  transactions WalletTransaction[]
  finance      Finance?            @relation(fields: [financeId], references: [id])
  financeId    String?

  @@index([school_id])
  @@index([wallet_type])
}

model WalletTransaction {
  id               String                  @id @default(cuid())
  wallet_id        String
  transaction_type WalletTransactionType
  amount           Float
  description      String
  reference        String?                 @unique
  status           WalletTransactionStatus @default(PENDING)
  metadata         Json? // Additional transaction data
  processed_at     DateTime?
  createdAt        DateTime                @default(now())
  updatedAt        DateTime                @updatedAt

  // relations
  wallet Wallet @relation(fields: [wallet_id], references: [id])

  @@index([wallet_id])
  @@index([transaction_type])
  @@index([status])
  @@index([createdAt])
  @@index([reference])
}

model TeacherSubject {
  id        String @id @default(cuid())
  teacherId String
  subjectId String

  teacher Teacher @relation(fields: [teacherId], references: [id])
  subject Subject @relation(fields: [subjectId], references: [id])

  @@unique([teacherId, subjectId])
}

model Notification {
  id          String           @id @default(cuid())
  school_id   String
  title       String
  description String
  type        NotificationType
  comingUpOn  DateTime?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  // relations
  school School @relation(fields: [school_id], references: [id])
}

model StudentPerformance {
  id          String   @id @default(cuid())
  student_id  String
  class_id    String
  term        Int // 1, 2, or 3
  year        Int
  total_score Float
  max_score   Float
  position    Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // relations
  student User  @relation("StudentPerformance", fields: [student_id], references: [id])
  class   Class @relation(fields: [class_id], references: [id])
}

model Organisation {
  id              String            @id @default(cuid())
  name            String            @unique
  email           String
  schools         School[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  videoContent    VideoContent[]
  pdfMaterial     PDFMaterial[]
  assignment      Assignment[]
  cbtQuiz         CBTQuiz[]
  liveClass       LiveClass[]
  libraryResource LibraryResource[]
}

// Content Models
model VideoContent {
  id           String  @id @default(cuid())
  title        String
  description  String?
  subjectId    String?
  url          String
  schoolId     String? // Optional: assigned to a specific school
  platformId   String
  uploadedById String

  platform   Organisation @relation(fields: [platformId], references: [id])
  school     School?      @relation(fields: [schoolId], references: [id])
  uploadedBy User         @relation(fields: [uploadedById], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([schoolId])
  @@index([platformId])
  @@index([subjectId])
}

model PDFMaterial {
  id           String  @id @default(cuid())
  title        String
  description  String?
  subjectId    String?
  url          String
  schoolId     String? // Optional: assigned to a specific school
  platformId   String
  uploadedById String

  platform   Organisation @relation(fields: [platformId], references: [id])
  school     School?      @relation(fields: [schoolId], references: [id])
  uploadedBy User         @relation(fields: [uploadedById], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([schoolId])
  @@index([platformId])
  @@index([subjectId])
}

model Assignment {
  id           String    @id @default(cuid())
  title        String
  description  String?
  subjectId    String?
  dueDate      DateTime?
  schoolId     String? // Optional: assigned to a specific school
  platformId   String
  uploadedById String

  platform   Organisation @relation(fields: [platformId], references: [id])
  school     School?      @relation(fields: [schoolId], references: [id])
  uploadedBy User         @relation(fields: [uploadedById], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([schoolId])
  @@index([platformId])
  @@index([subjectId])
  @@index([dueDate])
}

model CBTQuiz {
  id           String  @id @default(cuid())
  title        String
  description  String?
  subjectId    String?
  duration     Int? // Duration in minutes
  schoolId     String? // Optional: assigned to a specific school
  platformId   String
  uploadedById String

  platform   Organisation @relation(fields: [platformId], references: [id])
  school     School?      @relation(fields: [schoolId], references: [id])
  uploadedBy User         @relation(fields: [uploadedById], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([schoolId])
  @@index([platformId])
  @@index([subjectId])
}

model LiveClass {
  id          String   @id @default(cuid())
  title       String
  description String?
  subjectId   String?
  meetingUrl  String
  startTime   DateTime
  endTime     DateTime
  schoolId    String? // Optional: assigned to a specific school
  platformId  String
  createdById String

  platform  Organisation @relation(fields: [platformId], references: [id])
  school    School?      @relation(fields: [schoolId], references: [id])
  createdBy User         @relation(fields: [createdById], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([schoolId])
  @@index([platformId])
  @@index([subjectId])
  @@index([startTime])
}

model LibraryResource {
  id           String  @id @default(cuid())
  title        String
  description  String?
  resourceType String // e.g., "book", "article", "research_paper"
  url          String?
  schoolId     String? // Optional: assigned to a specific school
  platformId   String
  uploadedById String

  platform   Organisation @relation(fields: [platformId], references: [id])
  school     School?      @relation(fields: [schoolId], references: [id])
  uploadedBy User         @relation(fields: [uploadedById], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([schoolId])
  @@index([platformId])
  @@index([resourceType])
}
