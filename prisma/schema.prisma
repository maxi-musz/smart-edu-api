generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum SchoolType {
  primary
  secondary
  primary_and_secondary
}

enum SchoolOwnership {
  government
  private
}

enum SchoolStatus {
  not_verified
  pending
  approved
  rejected
  failed
  suspended
  closed
  archived
}

model School {
  id               String          @id @default(cuid())
  school_name      String
  school_email     String          @unique
  school_phone     String
  school_address   String
  school_type      SchoolType
  school_ownership SchoolOwnership
  status           SchoolStatus    @default(pending)

  cacId          String? @unique
  utilityBillId  String? @unique
  taxClearanceId String? @unique

  cac           Document? @relation("CACDoc", fields: [cacId], references: [id])
  utility_bill  Document? @relation("UtilityBillDoc", fields: [utilityBillId], references: [id])
  tax_clearance Document? @relation("TaxClearanceDoc", fields: [taxClearanceId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users    User[]
  classes  Class[]
  subjects Subject[]
}

model Document {
  id         String @id @default(cuid())
  secure_url String
  public_id  String

  schoolCac          School? @relation("CACDoc")
  schoolUtilityBill  School? @relation("UtilityBillDoc")
  schoolTaxClearance School? @relation("TaxClearanceDoc")
}

model User {
  id                String    @id @default(cuid())
  school_id         String
  email             String    @unique
  password          String
  first_name        String
  last_name         String
  phone_number      String
  otp               String?   @default("")
  otp_expires_at    DateTime?
  is_email_verified Boolean?  @default(false)
  is_otp_verified   Boolean?  @default(false)
  role              Roles     @default(student)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // relations
  school           School    @relation(fields: [school_id], references: [id])
  subjectsTeaching Subject[] @relation("TeacherSubject")
  classesEnrolled  Class[]   @relation("StudentClass")
  classesManaging  Class[]   @relation("ClassTeacher") // class teacher relationship
}

enum Roles {
  student
  teacher
  school_director
  admin
  super_admin
}

model Class {
  id             String  @id @default(cuid())
  name           String
  schoolId       String
  classTeacherId String?

  school       School    @relation(fields: [schoolId], references: [id])
  classTeacher User?     @relation("ClassTeacher", fields: [classTeacherId], references: [id])
  students     User[]    @relation("StudentClass")
  subjects     Subject[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subject {
  id        String @id @default(cuid())
  name      String // e.g., "Mathematics"
  classId   String
  teacherId String
  schoolId  String

  class   Class  @relation(fields: [classId], references: [id])
  teacher User   @relation("TeacherSubject", fields: [teacherId], references: [id])
  school  School @relation(fields: [schoolId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
